import Collections
import GameConfig

space integer[] MagicNodeUseCounts = integer[WAND_SLOT_SIZE]

public class MagicNodeInfo
    public integer index
    public MagicNode node
    public MagicNodeInfo(integer index, MagicNode node)
        this.index = index
        this.node = node
    public MagicNodeInfo(MagicNodeInfo info)
        this.index = info.index
        this.node = info.node
public class Magic 
    public List alters//<MagicNodeInfo>
    public MagicNodeInfo missile
    public List nexts//<Magic>
    public Magic()
        alters = List()
        missile = null
        nexts = List()
    public Magic(Magic magic)
        for var i = 0; i < magic.alters.Count(); i++
            alters.Add(MagicNodeInfo(MagicNodeInfo& magic.alters.Get(i)))
        if magic.missile == null
            missile = null
        else
            missile = MagicNodeInfo(magic.missile)
        for var i = 0; i < magic.nexts.Count(); i++
            nexts.Add(Magic(Magic& magic.nexts.Get(i)))
    public real, real CalcCost()// 魔法CD， 魔法耗蓝
        var cd = .0
        var mc = .0
        if missile?.node != null
            for var i = 0; i < alters.Count(); i++
                var alter = MagicNodeInfo& alters.Get(i)
                cd += alter.node.config.cd
                mc += alter.node.config.cost
            cd += missile.node.config.cd
            mc += missile.node.config.cost
        for var i = 0; i < nexts.Count(); i++
            var magic = Magic& nexts.Get(i)
            var c, var m = magic.CalcCost()
            cd += c 
            mc += m 
        return cd, mc
    public integer GetNodeCount(MagicNode node)
        var result = 0
        if missile.node != null
            if node.config.nodeType == MagicNodeType.Alter
                for var i = 0; i < alters.Count(); i++
                    if (MagicNodeInfo& alters.Get(i)).node == node
            elseif missile.node == node
                result++
        for var i = 0; i < nexts.Count(); i++
            var magic = Magic& nexts.Get(i)
            result += magic.GetNodeCount(node)
        return result

space integer CreateMagic(MagicNode[] nodes, integer sidx, Magic magic, Magic parent)
    for var i = sidx; i < WAND_SLOT_SIZE; i++
        var cn = nodes[i]
        if cn != null && (cn.number == 0 || cn.number > MagicNodeUseCounts[i])
            MagicNodeUseCounts[i]++
            if cn.config.nodeType == MagicNodeType.Alter
                magic.alters.Add(MagicNodeInfo(0, cn))
                var e = i
                for var idx = 0; idx < cn.config.multiple; idx++
                    var m = Magic(magic)
                    var mn = MagicNodeInfo& m.alters.Peek()
                    mn.index = idx
                    var end = CreateMagic(nodes, i + 1, m, parent)
                    if end > e 
                        e = end
                    elseif end < 0
                        break
                for var idx = 0; idx < cn.config.sequence; idx++
                    var m = Magic(magic)
                    var mn = MagicNodeInfo& m.alters.Peek()
                    mn.index = idx
                    var end = CreateMagic(nodes, e + 1, m, parent)
                    if end > e 
                        e = end
                    elseif end < 0
                        break
                if cn.config.multiple + cn.config.sequence > 0
                    return -1

            elseif cn.config.nodeType == MagicNodeType.Missile
                magic.missile = MagicNodeInfo(0, cn)
                parent.nexts.Add(magic)
                var e = i
                for var idx = 0; idx < cn.config.multiple; idx++
                    var m = Magic()
                    var end = CreateMagic(nodes, i + 1, m, magic)
                    if m.missile != null
                        m.missile.index = idx
                    if end > e
                        e = end
                    elseif end < 0
                        break
                for var idx = 0; idx < cn.config.sequence; idx++
                    var m = Magic()
                    var end = CreateMagic(nodes, e + 1, m, magic)
                    if m.missile != null
                        m.missile.index = idx
                    if end > e 
                        e = end
                    elseif end < 0
                        break
                return e
            else
                exit "未知的魔法节点类型"
    return -1

public Magic CreateMagic(MagicNode[] nodes)
    for var i = 0; i < WAND_SLOT_SIZE; i++
        MagicNodeUseCounts[i] = 0
    var root = Magic()
    CreateMagic(nodes, 0, Magic(), root)
    return root;