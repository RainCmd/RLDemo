import GameConfig
import Collections
import Utils
import kernel.Math

internal native OnUpdateUnitEntity(integer id, integer player, UnitType unitType, real hp, real maxHP, real mp, real maxMP)
internal native OnRemoveUnitEntity(integer id)
internal native OnUnitBuffChanged(integer unitId, integer buffId, bool addition)

public delegate real UnitDamageEvent(Unit source, real damage, Unit target)//返回修正后的伤害值
public List AnyUnitTakesDamage = List()//<UnitDamageEvent>
public DamageUnit(Unit source, real damage, Unit target)
    if target == null || !target.valid
        return
    for var i, var c = 0, AnyUnitTakesDamage.Count(); i < c; i++
        var e = UnitDamageEvent& AnyUnitTakesDamage.Get(i)
        damage = e(source, damage, target)
    target.Hit(source, damage)
    
public const string UNIT_ANIM_IDLE = "idle"
public const string UNIT_ANIM_MOVE = "move"
public const string UNIT_ANIM_DEATH = "death"
public delegate real HitEvent(Unit source, real damage)//返回修正后的伤害值
space task UnitMainLoopTask
public class Unit GameEntity
    public bool valid = true
    public integer player
    public UnitType unitType
    public real hp
    public real maxHP
    public real mp
    public real maxMP
    public real moveSpeed
    private bool autoMoving
    public real3 targetPosition
    public List buffs = List()//<Buff>
    public List onHitEvent = List()//<HitEvent>
    public Unit(integer configId, integer player, real3 forward, real3 position)
        var config = GetUnitConfig(configId)
        base.Init(config.entityConfigId, "stand", forward, position)
        this.player = player
        unitType = config.unitType
        hp = maxHP = config.hp
        mp = maxMP = config.mp
        moveSpeed = config.speed
        this->OnUpdate()
        autoMoving = false
        start MainLoop()
    public Remove(bool immediately)
        if !valid
            return
        for var i = 0; i < buffs.Count(); i++
            OnUnitBuffChanged(GetHandleID(), buffs.Get(i).GetHandleID(), false)
        OnRemoveUnitEntity(GetHandleID())
        ShowAnim(UNIT_ANIM_DEATH)
        base.Remove(immediately)
        valid = false

    private MainLoop()
        while valid
            wait
            UpdateAutoMove()

    public AddBuff(integer buffId, Unit source)
        if !valid
            return
        var cfg = GetBuffConfig(buffId)
        if cfg.refresh || cfg.accumulation
            for var i = 0; i < buffs.Count(); i++
                var b = Buff& buffs.Get(i)
                if b.config.id == buffId
                    b.OnUpdate(source)
                    return
        var buff = CreateBuff(cfg, source, this)
        buffs.Add(buff)
        OnUnitBuffChanged(GetHandleID(), buff.GetHandleID(), true)
    public Remove(Buff buff)
        if !valid
            return
        OnUnitBuffChanged(GetHandleID(), buff.GetHandleID(), false)
        buffs.Remove(buff)
        buff.Remove()
    public real Hit(Unit source, real damage)//返回真正造成的伤害
        for var i, var c = 0, onHitEvent.Count(); i < c; i++
            var e = HitEvent& onHitEvent.Get(i)
            damage = e(source, damage)
        var shp = hp
        hp -= damage
        if hp < 0
            hp = 0
        if shp != hp
            OnUpdate()
        if hp == 0
            Remove(false)
        return damage
    public Goto(real3 target)
        if !valid
            return
        targetPosition = target
        if autoMoving
            return
        autoMoving = true
        ShowAnim(UNIT_ANIM_MOVE)
    public RockMove(real dir, real dis)//dir[-π,π] dis[0,1]
        if !valid
            return
        autoMoving = false
        ShowAnim(UNIT_ANIM_MOVE)
        var forward = DirToForward(dir)
        var delta = moveSpeed * LOGIC_TIMESTEP * dis * forward
        Move(forward, position + delta)
    public StopMove()
        if !valid
            return
        autoMoving = false
        ShowAnim(UNIT_ANIM_IDLE)
    private UpdateAutoMove()
        if autoMoving
            var forward = targetPosition - position
            var sqrDis = forward.SqrMagnitude()
            forward = forward.Normalized()
            var step = moveSpeed * LOGIC_TIMESTEP
            if sqrDis < step * step
                Move(forward, targetPosition)
                ShowAnim(UNIT_ANIM_IDLE)
                autoMoving = false
            else
                Move(forward, position + forward * step)
    public OnUpdate()
        OnUpdateUnitEntity(GetHandleID(), player, unitType, hp, maxHP, mp, maxMP)