import GameConfig

internal native OnUpdateUnitEntity(integer id, integer player, UnitType unitType, real hp, real maxHP, real mp, real maxMP)
internal native OnRemoveUnitEntity(integer id)
integer native OnUnitBuffChanged(integer unitId, integer buffId, bool addition)

public Unit[], integer Add(Unit[] values, integer count, Unit value)
    if values.GetLength() == count
        var newValues = Unit[count * 2]
        for var i = 0; i < count; i++
            newValues[i] = values[i]
        values = newValues
    values[count++] = value
    return values, count

public Unit[], integer RemoveSwap(Unit[] values, integer count, Unit value)
    for var i = 0; i < count; i++
        if values[i] == value
            values[i] = values[--count]
            break
    return values, count

public Unit[], integer Remove(Unit[] values, integer count, Unit value)
    for var i = 0; i < count; i++
        if values[i] == value
            return RemoveAt(values, count, i)
    return values, count

public Unit[], integer RemoveAt(Unit[] values, integer count, integer index)
    while index++ < count
        values[index - 1] = values[index]
    return values, count - 1

space Unit[] unitPool = Unit[4]
space integer unitPoolCount = 0
public Unit CreateUnit(integer configId, integer player, real3 forward, real3 position)
    var result = unitPoolCount > 0 ? unitPool[--unitPoolCount] : Unit()
    result.Init(configId, player, forward, position)
    return result

public class Unit GameEntity
    public integer player
    public UnitType unitType
    public real hp
    public real maxHP
    public real mp
    public real maxMP
    public real moveSpeed
    public Buff[] buffs = Buff[4]
    public integer buffCount = 0

    public Init(integer configId, integer player, real3 forward, real3 position)
        var config = GetUnitConfig(configId)
        base.Init(config.entityConfigId, "stand", forward, position)
        this.player = player
        unitType = config.unitType
        hp = maxHP = config.hp
        mp = maxMP = config.mp
        moveSpeed = config.speed
        buffCount = 0
        this->OnUpdate()
    public Remove(bool immediately)
        for var i = 0; i < buffCount; i++
            OnUnitBuffChanged(GetHandleID(), buffs[i].GetHandleID(), false)
        OnRemoveUnitEntity(GetHandleID())
        base.Remove(immediately)
        unitPool, unitPoolCount = Add(unitPool, unitPoolCount, this)
    public Add(Buff buff)
        buffs, buffCount = Add(buffs, buffCount, buff)
        buff.Update()
        OnUnitBuffChanged(GetHandleID(), buff.GetHandleID(), true)
    public bool Accumulation(Buff buff)
        for var i = 0; i < buffCount; i++
            var b = buffs[i]
            if b.configId == buff.configId && b.source == buff.source
                b.number++
                b.Update()
                OnUnitBuffChanged(GetHandleID(), b.GetHandleID(), true)
                return false
        Add(buff)
        return true
    public Remove(Buff buff)
        OnUnitBuffChanged(GetHandleID(), buff.GetHandleID(), false)
        buffs, buffCount = RemoveSwap(buffs, buffCount, buff)
        buff.Remove()
    private OnUpdate()
        OnUpdateUnitEntity(GetHandleID(), player, unitType, hp, maxHP, mp, maxMP)