import GameConfig
import Collections
import Utils

internal native OnUpdateBuff(integer id, integer config, integer number, real startTime, real endTime)
internal native OnRemoveBuff(integer id)
private task BuffDelayRemove
public class Buff
    public BuffConfig config
    public Unit owner
    public Unit source
    public integer number
    public real startTime
    public real endTime
    private BuffDelayRemove delay
    protected OnCreate()
    protected OnRemove()
    public OnUpdate(Unit)
        if config.accumulation
            number++
        if config.refresh
            startTime = gameTime
            endTime = config.duration
        this->Update()
    public Update()
        OnUpdateBuff(GetHandleID(), config.id, number, startTime, endTime)
    private DelayRemove()
        while gameTime < endTime && delay != null
            wait
        if delay != null
            this->Remove()
    public Create()
        if config.duration > 0
            delay = start DelayRemove()
        OnCreate()
    public Remove()
        OnRemove()
        OnRemoveBuff(GetHandleID())
        delay = null

space StrDictionary buffTypeCache = StrDictionary()
public Buff CreateBuff(BuffConfig cfg, Unit source, Unit target)
    var f, var r = buffTypeCache.TryGet(cfg.logic)
    if !f
        r = FindType(cfg.logic, <Buff>)
        buffTypeCache.Set(cfg.logic, r)
    var result = CreateInstance(type& r) as Buff
    result.config = cfg
    result.source = source
    result.owner = target
    result.number = 1
    result.startTime = gameTime
    result.endTime = gameTime + cfg.duration
    result->Create()
    result->Update()
    return result