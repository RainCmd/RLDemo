import GameConfig
import Collections
import Utils

internal native OnUpdateBuff(integer id, integer config, integer number, real startTime, real endTime)
internal native OnRemoveBuff(integer id)

public class Buff
    public BuffConfig config
    public Unit owner
    public Unit source
    public integer number
    public real startTime
    public real endTime
    public OnCreate()
    public OnRemove()
    public OnUpdate(Unit)
        if config.accumulation
            number++
        if config.refresh
            startTime = gameTime
            endTime = config.duration
        this->Update()
    public Update()
        OnUpdateBuff(GetHandleID(), config.id, number, startTime, endTime)

    public Remove()
        OnRemove()
        OnRemoveBuff(GetHandleID())

space StrDictionary buffTypeCache = StrDictionary()
public Buff CreateBuff(BuffConfig cfg, Unit source, Unit target)
    var f, var r = buffTypeCache.TryGet(cfg.logic)
    if !f
        r = FindType(cfg.logic, <Buff>)
        buffTypeCache.Set(cfg.logic, r)
    var result = CreateInstance(type& r) as Buff
    result.config = cfg
    result.source = source
    result.owner = target
    result.number = 1
    result.startTime = gameTime
    result.endTime = gameTime + cfg.duration
    result.OnCreate()
    result->Update()
    return result