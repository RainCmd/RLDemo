
internal native OnPlayerBagMagicNodeChanged(integer player, integer nodeID, bool addition)
internal native OnPlayerWandMagicNodeChanged(integer player, integer wand, integer nodeID, integer slot)
internal native OnPlayerWandCDUpdate(integer player, integer wand, real startTime, real endTime)
internal native OnPlayerMagicNodePickListChanged(integer player, integer nodeID, bool addition)
internal native OnPlayerWandChanged(integer player, integer wandId)

public Player[] players

public struct Wand 
    real cdStartTime
    real cdEndTime
    MagicNode[] magicNodes

public class Player
    public integer id
    public string name
    public Unit hero
    public MagicNode[] bagMagicNodes = MagicNode[4]
    public integer bagMagicNodeCount = 0
    public Wand[] wands = Wand[3]
    public integer currentWand = 0
    private MagicNodeEntity[] pickList = MagicNodeEntity[4]
    private integer pickListCount = 0
    private MagicNodeEntity[] selectPickList = MagicNodeEntity[4]
    private integer selectPickListCount = 0
    public Player(integer id)
        this.id = id
        for var i = 0; i < wands.GetLength(); i++
            wands[i] = Wand(0, 0, MagicNode[WAND_SLOT_SIZE])
    public PickMagicNode(MagicNode node)
        if node.nodeEntity != null
            if (node.nodeEntity.position - hero.position).xz.SqrMagnitude() < PICK_RANGE * PICK_RANGE
                node.OnPick()
                bagMagicNodes, bagMagicNodeCount = Add(bagMagicNodes, bagMagicNodeCount, node)
                OnPlayerBagMagicNodeChanged(id, node.GetHandleID(), true)
    private MagicNode RemoveBagMagicNode(integer id)
        for var i, var c = 0, bagMagicNodeCount; i < c; i++
            var node = bagMagicNodes[i]
            if node.GetHandleID() == id
                bagMagicNodes, bagMagicNodeCount = Remove(bagMagicNodes, bagMagicNodeCount, node)
                OnPlayerBagMagicNodeChanged(id, id, false)
                return node
        return null
    private MagicNode RemoveWandMagicNode(integer id)
        for var weapon, var c = 0, wands.GetLength(); weapon < c; weapon++
            var wand = wands[weapon]
            for var i, var c = 0, wand.magicNodes.GetLength(); i < c; i++
                var node = wand.magicNodes[i]
                if node?.GetHandleID() == id
                    wand.magicNodes[i] = null
                    OnPlayerWandMagicNodeChanged(id, weapon, 0, i)
                    return node
        return null
    private OnUpdatePickListCallback(GameEntity e)
        if e is MagicNodeEntity mne
            selectPickList, selectPickListCount = global Add(selectPickList, selectPickListCount, mne)
    public UpdatePickList()
        selectPickListCount = 0
        worldRoot.SelectRange(hero.position.xz, PICK_RANGE, OnUpdatePickListCallback)
        for var i = 0; i < pickListCount; i++
            var mne = pickList[i]
            var idx = FindIndex(selectPickList, selectPickListCount, mne)
            if idx < 0
                pickList[i] = pickList[--pickListCount]
                OnPlayerMagicNodePickListChanged(id, mne.node.GetHandleID(), false)
        for var i = 0; i < selectPickListCount; i++
            var mne = selectPickList[i]
            var idx = FindIndex(pickList, pickListCount, mne)
            if idx < 0
                OnPlayerMagicNodePickListChanged(id, mne.node.GetHandleID(), true)
        var tmpList = pickList
        pickList = selectPickList
        selectPickList = tmpList
        pickListCount = selectPickListCount
//region 操作
    public OnRocker(real dir, real dis)//dir[-π,π] dis[0,1]
        //拖动摇杆移动
    public OnFire(real dir)//dir[-π,π]
        //开火
    public OnStopFire()
        //停止开火
    public OnSwitchWeapon(integer weapon)
        currentWand = weapon
        OnPlayerWandChanged(id, currentWand)
        
    public OnPick(integer trg)
        //捡起地上的装备
        UpdatePickList()
        for var i = 0; i < pickListCount; i++
            if pickList[i].node.GetHandleID() == trg
                PickMagicNode(pickList[i].node)
                return
        //把法杖中装备丢进背包
        for var weapon, var c = 0, wands.GetLength(); weapon < c; weapon++
            var wand = wands[weapon]
            for var i, var c = 0, wand.magicNodes.GetLength(); i < c; i++
                if trg == wand.magicNodes
                    var node = wand.magicNodes[i]
                    wand.magicNodes[i] = null
                    OnPlayerWandMagicNodeChanged(id, weapon, 0, i)
                    bagMagicNodes, bagMagicNodeCount = Add(bagMagicNodes, bagMagicNodeCount, node)
                    OnPlayerBagMagicNodeChanged(id, node.GetHandleID(), true)
                    return
    public OnDrop(integer trg)
        var node = RemoveBagMagicNode(trg)
        if node == null
            node = RemoveWandMagicNode(trg)
        node?.OnDrop(hero.position)
    public OnEquip(integer trg, integer weapon, integer slot)
        if weapon < 0 || weapon >= wands.GetLength() || slot < 0 && slot >= WAND_SLOT_SIZE
            return
        var wand = wands[weapon]
        var src = wand.magicNodes[slot]
        var node = RemoveBagMagicNode(trg)
        if node != null
            if src != null
                bagMagicNodes, bagMagicNodeCount = Add(bagMagicNodes, bagMagicNodeCount, src)
                OnPlayerBagMagicNodeChanged(id, src.GetHandleID(), true)
            wand.magicNodes[slot] = node
            OnPlayerWandMagicNodeChanged(id, weapon, trg, slot)
        else
            for var tweapon, var c = 0, wands.GetLength(); tweapon < c; tweapon++
                var twand = wands[tweapon]
                for var i = 0; i < WAND_SLOT_SIZE; i++
                    node = twand.magicNodes[i]
                    if node?.GetHandleID() == trg
                        twand.magicNodes[i] = src
                        OnPlayerWandMagicNodeChanged(id, tweapon, src?.GetHandleID(), i)
                        wand.magicNodes[slot] = node
                        OnPlayerWandMagicNodeChanged(id, weapon, trg, slot)
                        return
//endregion