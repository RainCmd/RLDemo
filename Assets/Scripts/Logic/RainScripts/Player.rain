import Collections

internal native OnPlayerBagMagicNodeChanged(integer player, integer nodeID, bool addition)
internal native OnPlayerWandMagicNodeChanged(integer player, integer wand, integer nodeID, integer slot)
internal native OnPlayerWandCDUpdate(integer player, integer wand, real startTime, real endTime)
internal native OnPlayerMagicNodePickListChanged(integer player, integer nodeID, bool addition)
internal native OnPlayerWandChanged(integer player, integer wandId)

public Player[] players

public struct Wand 
    real cdStartTime
    real cdEndTime
    MagicNode[] magicNodes
    public Magic CreateMagic()
        return global CreateMagic(magicNodes)
        
public class Player
    public integer id
    public string name
    public Unit hero
    public List bagMagicNodes = List()//<MagicNode>
    public Wand[] wands = Wand[3]
    public integer currentWand = 0
    private List pickList = List()//<MagicNodeEntity>
    private List selectPickList = List()//<MagicNodeEntity>
    private bool fire = false
    private real fireDir
    public Player(integer id)
        this.id = id
        for var i = 0; i < wands.GetLength(); i++
            wands[i] = Wand(0, 0, MagicNode[WAND_SLOT_SIZE])
        start PlayerMainLoop()
    private PlayerMainLoop()
        while
            wait
            FireLoop()
    public PickMagicNode(MagicNode node)
        if node.nodeEntity != null
            if (node.nodeEntity.position - hero.position).xz.SqrMagnitude() < PICK_RANGE * PICK_RANGE
                node.OnPick()
                bagMagicNodes.Add(node)
                OnPlayerBagMagicNodeChanged(id, node.GetHandleID(), true)
    private MagicNode RemoveBagMagicNode(integer id)
        for var i, var c = 0, bagMagicNodes.Count(); i < c; i++
            var node = MagicNode& bagMagicNodes.Get(i)
            if node.GetHandleID() == id
                bagMagicNodes.Remove(node)
                OnPlayerBagMagicNodeChanged(id, id, false)
                return node
        return null
    private MagicNode RemoveWandMagicNode(integer id)
        for var weapon, var c = 0, wands.GetLength(); weapon < c; weapon++
            var wand = wands[weapon]
            for var i, var c = 0, wand.magicNodes.GetLength(); i < c; i++
                var node = wand.magicNodes[i]
                if node?.GetHandleID() == id
                    wand.magicNodes[i] = null
                    OnPlayerWandMagicNodeChanged(id, weapon, 0, i)
                    return node
        return null
    private OnUpdatePickListCallback(GameEntity e)
        if e is MagicNodeEntity mne
            selectPickList.Add(mne)
    public UpdatePickList()
        selectPickList.Clear()
        worldRoot.SelectRange(hero.position.xz, PICK_RANGE, OnUpdatePickListCallback)
        for var i = 0; i < pickList.Count(); i++
            var idx = selectPickList.FindIndex(pickList.Get(i))
            if idx < 0
                var mne = MagicNodeEntity& pickList.RemoveAt(i)
                OnPlayerMagicNodePickListChanged(id, mne.node.GetHandleID(), false)
            else
                selectPickList.FastRemove(idx)
        for var i = 0; i < selectPickList.Count(); i++
            var mne = MagicNodeEntity& selectPickList.Get(i)
            OnPlayerMagicNodePickListChanged(id, mne.node.GetHandleID(), true)
            pickList.Add(mne)
    private FireLoop()
        if fire && wands[currentWand].cdEndTime < gameTime
            var magic = wands[currentWand].CreateMagic()
            if magic.nexts.Count() == 0
                return//无效的法术
            var cd, var mc = magic.CalcCost()
            if hero.mp < mc
                return//魔法不足
            var nodes = wands[currentWand].magicNodes
            for var i = 0; i < nodes.GetLength(); i++
                var node = nodes[i]
                if node.number > 0
                    var cnt = magic.GetNodeCount(node)
                    if cnt > 0
                        node.number -= cnt
                        if node.number == 0
                            nodes[i] = null
                            OnPlayerWandMagicNodeChanged(id, currentWand, 0, i)
                            node.Remove()
                        else
                            node.OnUpdate()
            for var i = 0; i < magic.nexts.Count(); i++
                var m = Magic& magic.nexts.Get(i)
                CreateMissileMagicNode(hero, m.missile.node.config).OnStart(m, fireDir)
            wands[currentWand].cdStartTime = gameTime
            wands[currentWand].cdEndTime = gameTime + cd
            OnPlayerWandCDUpdate(id, currentWand, gameTime, gameTime + cd)
            hero.mp -= mc
            hero.OnUpdate()

//region 操作
    public OnRocker(real dir, real dis)//dir[-π,π] dis[0,1]
        //拖动摇杆移动
    public OnFire(real dir)//dir[-π,π]
        //开火
        fireDir = dir
        fire = true

    public OnStopFire()
        //停止开火
        fire = false
    public OnSwitchWeapon(integer weapon)
        currentWand = weapon
        OnPlayerWandChanged(id, currentWand)
        
    public OnPick(integer trg)
        //捡起地上的装备
        UpdatePickList()
        for var i = 0; i < pickList.Count(); i++
            var mne = MagicNodeEntity& pickList.Get(i)
            if mne.node.GetHandleID() == trg
                PickMagicNode(mne.node)
                return
        //把法杖中装备丢进背包
        for var weapon, var c = 0, wands.GetLength(); weapon < c; weapon++
            var wand = wands[weapon]
            for var i, var c = 0, wand.magicNodes.GetLength(); i < c; i++
                if trg == wand.magicNodes
                    var node = wand.magicNodes[i]
                    wand.magicNodes[i] = null
                    OnPlayerWandMagicNodeChanged(id, weapon, 0, i)
                    bagMagicNodes.Add(node)
                    OnPlayerBagMagicNodeChanged(id, node.GetHandleID(), true)
                    return
    public OnDrop(integer trg)
        var node = RemoveBagMagicNode(trg)
        if node == null
            node = RemoveWandMagicNode(trg)
        node?.OnDrop(hero.position)
    public OnEquip(integer trg, integer weapon, integer slot)
        if weapon < 0 || weapon >= wands.GetLength() || slot < 0 && slot >= WAND_SLOT_SIZE
            return
        var wand = wands[weapon]
        var src = wand.magicNodes[slot]
        var node = RemoveBagMagicNode(trg)
        if node != null
            if src != null
                bagMagicNodes.Add(src)
                OnPlayerBagMagicNodeChanged(id, src.GetHandleID(), true)
            wand.magicNodes[slot] = node
            OnPlayerWandMagicNodeChanged(id, weapon, trg, slot)
        else
            for var tweapon, var c = 0, wands.GetLength(); tweapon < c; tweapon++
                var twand = wands[tweapon]
                for var i = 0; i < WAND_SLOT_SIZE; i++
                    node = twand.magicNodes[i]
                    if node?.GetHandleID() == trg
                        twand.magicNodes[i] = src
                        OnPlayerWandMagicNodeChanged(id, tweapon, src?.GetHandleID(), i)
                        wand.magicNodes[slot] = node
                        OnPlayerWandMagicNodeChanged(id, weapon, trg, slot)
                        return
//endregion