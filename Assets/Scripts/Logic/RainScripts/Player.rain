import Collections

internal native OnPlayerBagMagicNodeChanged(integer player, integer nodeID, bool addition)
internal native OnPlayerWandMagicNodeChanged(integer player, integer wand, integer nodeID, integer slot)
internal native OnPlayerWandCDUpdate(integer player, integer wand, real startTime, real endTime)
internal native OnPlayerMagicNodePickListChanged(integer player, integer nodeID, bool addition)
internal native OnPlayerWandChanged(integer player, integer wandId)

public Player[] players = Player[64]
public Player monsterPlayer
public InitPlayers(integer[] ctrls)
    for var i = 0; i < 64; i++
        players[i] = Player(i)
    monsterPlayer = players[63]
    for var i = 0; i < ctrls.GetLength(); i++
        players[ctrls[i]].EnableCtrl()

public struct Wand 
    real cdStartTime
    real cdEndTime
    MagicNode[] magicNodes
    public Magic CreateMagic()
        return global CreateMagic(magicNodes)
        
public class Player
    public integer id
    public Camp camp
    public string name
    public Unit hero
    public List bagMagicNodes = List()//<MagicNode>
    public Wand[] wands = Wand[3]
    public integer currentWand = 0
    public List pickList = List()//<MagicNode>
    private List selectPickList = List()//<MagicNodeEntity>
    private bool fire = false
    private real fireDir
    private real rockDir
    private real rockDis
    public Player(integer id)
        this.id = id
        camp = Camp(id)
        for var i = 0; i < wands.GetLength(); i++
            wands[i] = Wand(0, 0, MagicNode[WAND_SLOT_SIZE])
        
    public EnableCtrl()
        hero = Unit('U_hero', this, FORWARD, GetRandomWorldPosition()) 
        hero.AddBuff('Infusion', null)
        wands[0].magicNodes[0] = MagicNode('fireball')
        start PlayerMainLoop()
    private PlayerMainLoop()
        while
            wait
            FireLoop()
            MoveLoop()
            UpdatePickList()

    public PickMagicNode(MagicNode node)
        if node.nodeEntity != null
            if (node.nodeEntity.position - hero.position).xz.SqrMagnitude() < PICK_RANGE * PICK_RANGE
                node.OnPick(this)
                BagAddMagicNode(node)
    private MagicNode RemoveBagMagicNode(integer id)
        var node = bagMagicNodes.Find(item => item.GetHandleID() == id)
        if node != null
            bagMagicNodes.Remove(node)
            OnPlayerBagMagicNodeChanged(this.id, id, false)
        return node as MagicNode
    private BagAddMagicNode(MagicNode node)
        if node != null
            bagMagicNodes.Add(node)
            OnPlayerBagMagicNodeChanged(id, node.GetHandleID(), true)
    private integer, integer, MagicNode FindWandMagicNode(integer nodeId)
        for var weapon = 0; weapon < wands.GetLength(); weapon++
            var wand = wands[weapon]
            for var slot = 0; slot < WAND_SLOT_SIZE; slot++
                var node = wand.magicNodes[slot]
                if node?.GetHandleID() == nodeId
                    return weapon, slot, node
        return - 1, -1, null
    private SetWandMagicNode(integer weapon, integer slot, MagicNode node)
        if wands[weapon].magicNodes[slot] != node
            wands[weapon].magicNodes[slot] = node
            OnPlayerWandMagicNodeChanged(id, weapon, node?.GetHandleID(), slot)

    private MagicNode RemoveWandMagicNode(integer id)
        var weapon, var slot, var node = FindWandMagicNode(id)
        if node != null
            SetWandMagicNode(weapon, slot, null)
        return node

    private OnUpdatePickListCallback(GameEntity e)
        if e is MagicNodeEntity mne
            selectPickList.Add(mne)
    public UpdatePickList()
        selectPickList.Clear()
        worldRoot.SelectRange(hero.position.xz, PICK_RANGE, OnUpdatePickListCallback)
        for var i = 0; i < pickList.Count(); i++
            var idx = selectPickList.FindIndex((MagicNode& pickList.Get(i)).nodeEntity)
            if idx < 0
                var node = MagicNode& pickList.RemoveAt(i)
                OnPlayerMagicNodePickListChanged(id, node.GetHandleID(), false)
                i--
            else
                selectPickList.FastRemove(idx)
        for var i = 0; i < selectPickList.Count(); i++
            var mne = MagicNodeEntity& selectPickList.Get(i)
            OnPlayerMagicNodePickListChanged(id, mne.node.GetHandleID(), true)
            pickList.Add(mne.node)
    private FireLoop()
        if fire && wands[currentWand].cdEndTime < gameTime
            var magic = wands[currentWand].CreateMagic()
            if magic.nexts.Count() == 0
                return//无效的法术
            var cd, var mc = magic.CalcCost()
            if hero.GetMP() < mc
                return//魔法不足
            var nodes = wands[currentWand].magicNodes
            for var i = 0; i < nodes.GetLength(); i++
                var node = nodes[i]
                if node?.number > 0
                    var cnt = magic.GetNodeCount(node)
                    if cnt > 0
                        node.number -= cnt
                        if node.number == 0
                            nodes[i] = null
                            OnPlayerWandMagicNodeChanged(id, currentWand, 0, i)
                            node.Remove()
                        else
                            node.OnUpdate()
            for var i = 0; i < magic.nexts.Count(); i++
                var m = Magic& magic.nexts.Get(i)
                CreateMissileMagicNode(hero, m.missile.node.config)->OnStart(m, hero.position, fireDir)
            wands[currentWand].cdStartTime = gameTime
            wands[currentWand].cdEndTime = gameTime + cd
            OnPlayerWandCDUpdate(id, currentWand, gameTime, gameTime + cd)
            hero.SetMP(hero.GetMP() - mc)
    private MoveLoop()
        if rockDis > .1
            hero.RockMove(rockDir, rockDis)
        else
            hero.StopMove()
//region 操作
    public OnRocker(real dir, real dis)//dir[-π,π] dis[0,1]
        //拖动摇杆移动
        rockDir = dir
        rockDis = dis
    public OnFire(real dir)//dir[-π,π]
        //开火
        fireDir = dir
        fire = true

    public OnStopFire()
        //停止开火
        fire = false
    public OnSwitchWeapon(integer weapon)
        currentWand = weapon
        OnPlayerWandChanged(id, currentWand)
        
    public OnPick(integer trg)
        //捡起地上的装备
        UpdatePickList()
        var node = pickList.Find(item => item.GetHandleID() == trg)
        if node != null
            PickMagicNode(MagicNode & node)
            return
        //把法杖中装备丢进背包
        var weapon, var slot, var node = FindWandMagicNode(trg)
        if node != null
            SetWandMagicNode(weapon, slot, null)
            BagAddMagicNode(node)
    public OnDrop(integer trg)
        var node = RemoveBagMagicNode(trg)
        if node == null
            node = RemoveWandMagicNode(trg)
        node?.OnDrop(hero.position)
    
    public OnEquip(integer trg, integer weapon, integer slot)
        if weapon < 0 || weapon >= wands.GetLength() || slot < 0 && slot >= WAND_SLOT_SIZE
            return
        var src = wands[weapon].magicNodes[slot]
        var node = RemoveBagMagicNode(trg)
        if node != null
            BagAddMagicNode(src)
            SetWandMagicNode(weapon, slot, node)
        else
            var tweapon, var tslot, node = FindWandMagicNode(trg)
            if node != null
                SetWandMagicNode(tweapon, tslot, src)
            SetWandMagicNode(weapon, slot, node)
//endregion