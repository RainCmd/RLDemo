import GameConfig
import Collections
import kernel.System
import kernel.Reflection

public class MagicNodeInstance
    public Unit creater
    public MagicNodeConfig config
    public real GetDir(real dir, integer index)
        return dir
    public OnEnd()

public class MissileMagicNode MagicNodeInstance
    private Magic magic
    public real dir
    public List alters = List()//<AlterMagicNode>
    public OnStart(Magic magic, real dir)
        this.magic = magic
        for var i = 0; i < magic.alters.Count(); i++
            var info = MagicNodeInfo& magic.alters.Get(i)
            var alter = CreateAlterMagicNode(creater, info.node.config)
            dir = alter.GetDir(dir, info.index)
            alters.Add(alter)
        this.dir = dir
        for var i = 0; i < alters.Count(); i++
            var alter = AlterMagicNode& alters.Get(i)
            start alter.OnStart(this)
        start OnStart()
    public OnStart()
    public OnHit(Unit target)
        for var i = 0; i < alters.Count(); i++
            var alter = AlterMagicNode& alters.Get(i)
            alter.OnHit(target)
    public OnFinish()
        for var i = 0; i < alters.Count(); i++
            var alter = AlterMagicNode& alters.Get(i)
            alter.OnFinish()
    public TriggerNext()
        for var i = 0; i < magic.nexts.Count(); i++
            var m = Magic& magic.nexts.Get(i)
            var missile = CreateMissileMagicNode(creater, m.missile.node.config)
            missile.OnStart(m, GetDir(dir, m.missile.index))

public class AlterMagicNode MagicNodeInstance
    public OnStart(MissileMagicNode node)
    public OnHit(Unit)
    public OnFinish()

namespace MagicNodeInstanceUtils
    import Collections

    space StrDictionary typeCache = StrDictionary()
    space type FindNodeType(Space s, string name, type parent)
        var ts = s.GetTypes()
        for var i = 0; i < ts.GetCount(); i++
            var t = ts.GetElement(i)
            if t.GetName() == name && t.IsAssignable(parent)
                return t
        var ss = s.GetChildren()
        for var i = 0; i < ss.GetCount(); i++
            var t = FindNodeType(ss.GetElement(i), name, parent)
            if t.GetName() == name && t.IsAssignable(parent)
                return t
        return <MagicNodeInstance>
    space type FindNodeType(string name, type parent)
        var f, var r = typeCache.TryGet(name)
        if f 
            return type& r
        var ass = GetAssembles()
        for var i = 0; i < ass.GetLength(); i++
            var result = FindNodeType(ass[i], name, parent)
            if(result != <MagicNodeInstance>)
                typeCache.Set(name, result)
                return result
        return <MagicNodeInstance>

    space handle CreateInstance(type t)
        var ctors = t.GetConstructors()
        for var i = 0; i < ctors.GetCount(); i++
            var ctor = ctors.GetElement(i)
            if ctor.GetParameters().GetCount() == 0
                return ctor.Invoke(null)
        return null
    internal handle GetNodeInstance(Unit creater, MagicNodeConfig config)
        var t = FindNodeType(config.logic, <MissileMagicNode>)
        if t != <MagicNodeInstance>
            var node = CreateInstance(t)
            if node is MagicNodeInstance instance
                instance.creater = creater
                instance.config = config
                return instance
        return null
public MissileMagicNode CreateMissileMagicNode(Unit creater, MagicNodeConfig config)
    return MagicNodeInstanceUtils.GetNodeInstance(creater, config) as MissileMagicNode
public AlterMagicNode CreateAlterMagicNode(Unit creater, MagicNodeConfig config)
    return MagicNodeInstanceUtils.GetNodeInstance(creater, config) as AlterMagicNode