import GameConfig
import Collections
import Utils
import kernel.Math

public class MagicNodeInstance
    public Unit creater
    public MagicNodeConfig config
    public real GetDir(real dir, integer index)//dir [-π, π]
        return dir
    public OnEnd()

public class MissileMagicNode MagicNodeInstance
    private Magic magic
    public List alters = List()//<AlterMagicNode>
    public real3 position
    public real3 velocity
    public OnStart(Magic magic, real dir)
        this.magic = magic
        for var i = 0; i < magic.alters.Count(); i++
            var info = MagicNodeInfo& magic.alters.Get(i)
            var alter = CreateAlterMagicNode(creater, info.node.config)
            dir = alter.GetDir(dir, info.index)
            alters.Add(alter)
        position = creater.position
        velocity = DirToForward(dir)
        for var i = 0; i < alters.Count(); i++
            var alter = AlterMagicNode& alters.Get(i)
            start alter.OnStart(this)
        start OnStart()
    public OnStart()
    public OnHit(Unit target)
        for var i = 0; i < alters.Count(); i++
            var alter = AlterMagicNode& alters.Get(i)
            alter.OnHit(target)
    public OnFinish()
        for var i = 0; i < alters.Count(); i++
            var alter = AlterMagicNode& alters.Get(i)
            alter.OnFinish()
    public TriggerNext()
        var dir = ForwardToDir(velocity)
        for var i = 0; i < magic.nexts.Count(); i++
            var m = Magic& magic.nexts.Get(i)
            var missile = CreateMissileMagicNode(creater, m.missile.node.config)
            missile.OnStart(m, GetDir(dir, m.missile.index))

public class AlterMagicNode MagicNodeInstance
    public OnStart(MissileMagicNode)
    public OnHit(Unit)
    public OnFinish()

space StrDictionary magicNodeTypeCache = StrDictionary()
internal handle GetNodeInstance(Unit creater, MagicNodeConfig config, type t)
    var f, var r = magicNodeTypeCache.TryGet(config.logic)
    if !f
        r = FindType(config.logic, t)
        magicNodeTypeCache.Set(config.logic, r)
    var node = MagicNodeInstance& CreateInstance(type& r)
    node.creater = creater
    node.config = config
    return node
public MissileMagicNode CreateMissileMagicNode(Unit creater, MagicNodeConfig config)
    return GetNodeInstance(creater, config, <MissileMagicNode>) as MissileMagicNode
public AlterMagicNode CreateAlterMagicNode(Unit creater, MagicNodeConfig config)
    return GetNodeInstance(creater, config, <AlterMagicNode>) as AlterMagicNode