import GameConfig
import Collections

internal native OnUpdateMagicNode(integer nodeId, integer configId, integer number)
internal native OnRemvoeMagicNode(integer id)
public delegate bool MatchMagicNode(MagicNode)

public class MagicNodeEntity GameEntity
    public MagicNode node

public class MagicNode
    public MagicNodeEntity nodeEntity
    public MagicNodeConfig config
    public integer number
    public Init(integer configId, real3 position)
        nodeEntity = null
        config = GetMagicNodeConfig(configId)
        number = config.number
        OnUpdate()
        OnDrop(position)
    public Remove()
        OnRemvoeMagicNode(GetHandleID())
        OnPick()
        magicNodePool.Add(this)
    public OnDrop(real3 position)
        if nodeEntity == null
            nodeEntity = magicNodeEntityPool.Count() > 0 ? MagicNodeEntity& magicNodeEntityPool.Pop() : MagicNodeEntity()
            nodeEntity.node = this
            nodeEntity.Init(config.entityConfigId, "stand", FORWARD, position)
        else
            nodeEntity.Move(position)
    public OnPick()
        if nodeEntity != null
            nodeEntity.ShowAnim("kill")
            nodeEntity.Remove(false)
            nodeEntity.node = null
            magicNodeEntityPool.Add(nodeEntity)
            nodeEntity = null
    public OnUpdate()
        OnUpdateMagicNode(GetHandleID(), config.id, number)

public MagicNode CreateMagicNode(integer configId, real3 position)
    var node = magicNodeEntityPool.Count() > 0 ? MagicNode& magicNodePool.Pop() : MagicNode()
    node.Init(configId, position)
    return node

space List magicNodeEntityPool = List()//<MagicNodeEntity>
space List magicNodePool = List()//<MagicNode>