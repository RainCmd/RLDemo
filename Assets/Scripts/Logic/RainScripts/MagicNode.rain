import GameConfig
import Collections

internal native OnUpdateMagicNode(integer nodeId, integer configId, integer number)
internal native OnRemvoeMagicNode(integer id)
public delegate bool MatchMagicNode(MagicNode)
public delegate OnPickNode(Player picker, MagicNode node)
public List onMagicNodePick = List()//<OnPickNode>
private task DelayRemoveMaigcNodeTask
public class MagicNodeEntity GameEntity
    public MagicNode node
    private DelayRemoveMaigcNodeTask delayRemove
    public MagicNodeEntity(MagicNode node, real3 position)
        this.node = node
        Init(node.config.entityConfigId, "stand", FORWARD, position)
        delayRemove = start DelayRemove()
    public Remove(bool immediately)
        if !immediately
            ShowAnim("kill")
        node = null
        delayRemove?.Abort()
        delayRemove = null
        base.Remove(immediately)
    private DelayRemove()
        Wait(20)
        delayRemove = null
        node?->Remove()

public class MagicNode
    public MagicNodeEntity nodeEntity
    public MagicNodeConfig config
    public integer number
    public MagicNode(integer configId)
        nodeEntity = null
        config = GetMagicNodeConfig(configId)
        number = config.number
        OnUpdate()
    public MagicNode(integer configId, real3 position) this(configId)
        OnDrop(position)
    public Remove()
        OnRemvoeMagicNode(GetHandleID())
        nodeEntity?->Remove(false)
        nodeEntity = null
    private DelayRemove()
        Wait(10)
        Remove()

    public OnDrop(real3 position)
        if nodeEntity == null
            nodeEntity = MagicNodeEntity(this, position)
        else
            nodeEntity.Move(position)
    public OnPick(Player picker)
        for var i = 0; i < onMagicNodePick.Count(); i++
            var onPick = OnPickNode & onMagicNodePick.Get(i)
            onPick(picker, this)
        nodeEntity?->Remove(false)
        nodeEntity = null
        
    public OnUpdate()
        OnUpdateMagicNode(GetHandleID(), config.id, number)
