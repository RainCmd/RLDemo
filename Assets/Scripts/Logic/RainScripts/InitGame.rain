import GameConfig
internal native ShowFloatText(real3 position, real3 color, string value)
namespace InitGame
    public OperRocker(integer ctrlId, real dir, real dis)
        players[ctrlId].OnRocker(dir, dis)

    public OperFire(integer ctrlId, real dir)
        players[ctrlId].OnFire(dir)

    public OperStopFire(integer ctrlId)
        players[ctrlId].OnStopFire()

    public OperSwitchWeapon(integer ctrlId, integer weapon)
        players[ctrlId].OnSwitchWeapon(weapon)

    public OperPick(integer ctrlId, integer trg)
        players[ctrlId].OnPick(trg)

    public OperDrop(integer ctrlId, integer trg)
        players[ctrlId].OnDrop(trg)

    public OperEquip(integer ctrlId, integer trg, integer weapon, integer slot)
        players[ctrlId].OnEquip(trg, weapon, slot)
    
    //逻辑世界初始化
    public GameMain(integer[] ctrls)
        LoadMagicNodeConfig()
        LoadEntityConfig()
        LoadUnitConfig()
        LoadBuffConfig()
        InitPlayers(ctrls)

        start SpawnEnemy()

    //逻辑更新开始前
    public GameEntry()
        StartWorld()

    public native OnLoadGameEntity(integer id, string resource, string anim, real3 forward, real3 position)
    public native OnLoadGameUnit(integer id, integer player, UnitType unitType, real hp, real maxHP, real mp, real maxMP)
    public native OnLoadBuff(integer unitId, integer id, integer configId, integer number, real startTime, real endTime)
    public native OnLoadMagicNode(integer id, integer configId, integer number)
    space OnLoadEntity(GameEntity e)
        OnLoadGameEntity(e.GetHandleID(), e.resource, e.anim, e.forward, e.position)
        if e is Unit u
            OnLoadGameUnit(u.GetHandleID(), u.player.id, u.unitType, u.hp, u.maxHP, u.mp, u.maxMP)
            for var i = 0; i < u.buffs.Count(); i++
                var b = Buff& u.buffs.Get(i)
                OnLoadBuff(u.GetHandleID(), b.GetHandleID(), b.config.id, b.number, b.startTime, b.endTime)
        elseif e is MagicNodeEntity mne 
            OnLoadMagicNode(mne.node.GetHandleID(), mne.node.config.id, mne.node.number)

    public LoadGameData()
        worldRoot.SelectAll(OnLoadEntity)
        for var i = 0; i < players.GetLength(); i++
            var player = players[i]
            for var i = 0; i < player.bagMagicNodes.Count(); i++
                var node = MagicNode& player.bagMagicNodes.Get(i)
                OnLoadMagicNode(node.GetHandleID(), node.config.id, node.number)
            for var i = 0; i < player.wands.GetLength(); i++
                var wand = player.wands[i]
                for var i = 0; i < wand.magicNodes.GetLength(); i++
                    var node = wand.magicNodes[i]
                    if node != null
                        OnLoadMagicNode(node.GetHandleID(), node.config.id, node.number)

    public Init_SetPlayerName(integer ctrlId, string name)
        players[ctrlId].name = name
    public integer Init_GetPlayerCount()
        return players.GetLength()
    public string, integer, integer, integer[], integer[] Init_GetPlayer(integer id)//玩家名, 玩家英雄id, 当前法杖, 背包列表, 拾取列表
        var player = players[id]
        var bag = integer[player.bagMagicNodes.Count()]
        for var i = 0; i < bag.GetLength(); i++
            bag[i] = player.bagMagicNodes.Get(i).GetHandleID()
        var pick = integer[player.pickList.Count()]
        for var i = 0; i < player.pickList.Count(); i++
            pick[i] = player.pickList.Get(i).GetHandleID()
        return player.name, player.hero?.GetHandleID(), player.currentWand, bag, pick
    public real, real, integer[] Init_GetPlayerWand(integer playerId, integer wand)//法杖cdStart,法杖cdEnd,法杖法术
        var wand = players[playerId].wands[wand]
        var nodes = integer[WAND_SLOT_SIZE]
        for var i = 0; i < nodes.GetLength(); i++
            nodes[i] = wand.magicNodes[i]?.GetHandleID()
        return wand.cdStartTime, wand.cdEndTime, nodes

